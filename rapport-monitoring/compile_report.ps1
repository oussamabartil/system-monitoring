# Script PowerShell pour compiler le rapport LaTeX
# G√©n√®re automatiquement les graphiques et compile le PDF

param(
    [switch]$GenerateGraphs = $true,
    [switch]$OpenPDF = $true
)

Write-Host "üìÑ COMPILATION DU RAPPORT DE MONITORING" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "rapport-monitoring.tex")) {
    Write-Host "‚ùå Fichier rapport-monitoring.tex non trouv√©!" -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le dossier rapport-monitoring" -ForegroundColor Yellow
    exit 1
}

# Fonction pour v√©rifier si une commande existe
function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

# V√©rifier les d√©pendances
Write-Host "üîç V√©rification des d√©pendances..." -ForegroundColor Yellow

$dependencies = @{
    "python" = "Python (pour g√©n√©rer les graphiques)"
    "pdflatex" = "LaTeX (pour compiler le PDF)"
}

$missingDeps = @()
foreach ($dep in $dependencies.Keys) {
    if (Test-Command $dep) {
        Write-Host "‚úÖ $($dependencies[$dep]) : Disponible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($dependencies[$dep]) : Non trouv√©" -ForegroundColor Red
        $missingDeps += $dep
    }
}

if ($missingDeps.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  D√©pendances manquantes d√©tect√©es!" -ForegroundColor Yellow
    Write-Host "Pour installer les d√©pendances manquantes :" -ForegroundColor White
    
    if ($missingDeps -contains "python") {
        Write-Host "- Python : T√©l√©chargez depuis https://python.org" -ForegroundColor White
        Write-Host "  Puis installez les packages : pip install matplotlib seaborn pandas numpy" -ForegroundColor White
    }
    
    if ($missingDeps -contains "pdflatex") {
        Write-Host "- LaTeX : Installez MiKTeX depuis https://miktex.org" -ForegroundColor White
        Write-Host "  Ou TeX Live depuis https://tug.org/texlive/" -ForegroundColor White
    }
    
    $continue = Read-Host "`nVoulez-vous continuer malgr√© les d√©pendances manquantes? (y/N)"
    if ($continue -ne 'y' -and $continue -ne 'Y') {
        exit 1
    }
}

Write-Host ""

# √âtape 1: G√©n√©rer les graphiques
if ($GenerateGraphs) {
    Write-Host "üé® G√©n√©ration des graphiques..." -ForegroundColor Yellow
    
    if (Test-Command "python") {
        try {
            # V√©rifier si les packages Python sont install√©s
            $pythonCheck = python -c "import matplotlib, seaborn, pandas, numpy; print('OK')" 2>$null
            if ($pythonCheck -eq "OK") {
                python generate_graphs.py
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ Graphiques g√©n√©r√©s avec succ√®s" -ForegroundColor Green
                } else {
                    Write-Host "‚ùå Erreur lors de la g√©n√©ration des graphiques" -ForegroundColor Red
                }
            } else {
                Write-Host "‚ùå Packages Python manquants. Installez avec :" -ForegroundColor Red
                Write-Host "pip install matplotlib seaborn pandas numpy" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Erreur lors de l'ex√©cution du script Python" -ForegroundColor Red
            Write-Host $_.Exception.Message -ForegroundColor Red
        }
    } else {
        Write-Host "‚ö†Ô∏è  Python non disponible, g√©n√©ration des graphiques ignor√©e" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚è≠Ô∏è  G√©n√©ration des graphiques ignor√©e (param√®tre -GenerateGraphs:$false)" -ForegroundColor Yellow
}

Write-Host ""

# √âtape 2: Compiler le LaTeX
Write-Host "üìù Compilation du document LaTeX..." -ForegroundColor Yellow

if (Test-Command "pdflatex") {
    try {
        # Premi√®re compilation
        Write-Host "   Premi√®re passe..." -ForegroundColor Gray
        pdflatex -interaction=nonstopmode rapport-monitoring.tex | Out-Null
        
        # Deuxi√®me compilation pour les r√©f√©rences crois√©es
        Write-Host "   Deuxi√®me passe (r√©f√©rences crois√©es)..." -ForegroundColor Gray
        pdflatex -interaction=nonstopmode rapport-monitoring.tex | Out-Null
        
        # Troisi√®me compilation pour la table des mati√®res
        Write-Host "   Troisi√®me passe (table des mati√®res)..." -ForegroundColor Gray
        pdflatex -interaction=nonstopmode rapport-monitoring.tex | Out-Null
        
        if (Test-Path "rapport-monitoring.pdf") {
            Write-Host "‚úÖ PDF g√©n√©r√© avec succ√®s : rapport-monitoring.pdf" -ForegroundColor Green
            
            # Obtenir la taille du fichier
            $fileSize = (Get-Item "rapport-monitoring.pdf").Length
            $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
            Write-Host "üìÑ Taille du fichier : $fileSizeMB MB" -ForegroundColor White
            
        } else {
            Write-Host "‚ùå Erreur : Le fichier PDF n'a pas √©t√© cr√©√©" -ForegroundColor Red
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors de la compilation LaTeX" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå pdflatex non disponible, compilation impossible" -ForegroundColor Red
    Write-Host "Installez MiKTeX ou TeX Live pour compiler le document" -ForegroundColor Yellow
}

Write-Host ""

# √âtape 3: Nettoyage des fichiers temporaires
Write-Host "üßπ Nettoyage des fichiers temporaires..." -ForegroundColor Yellow

$tempFiles = @("*.aux", "*.log", "*.toc", "*.lof", "*.lot", "*.out", "*.fls", "*.fdb_latexmk", "*.synctex.gz")
foreach ($pattern in $tempFiles) {
    $files = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
    if ($files) {
        Remove-Item $pattern -Force
        Write-Host "   Supprim√© : $pattern" -ForegroundColor Gray
    }
}

Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green
Write-Host ""

# √âtape 4: R√©sum√© et ouverture
Write-Host "üìä R√âSUM√â DE LA COMPILATION" -ForegroundColor Green
Write-Host "===========================" -ForegroundColor Cyan

if (Test-Path "images") {
    $imageCount = (Get-ChildItem -Path "images" -Filter "*.png").Count
    Write-Host "üé® Graphiques g√©n√©r√©s : $imageCount fichiers" -ForegroundColor White
}

if (Test-Path "rapport-monitoring.pdf") {
    Write-Host "üìÑ Rapport PDF : ‚úÖ G√©n√©r√© avec succ√®s" -ForegroundColor Green
    
    # Ouvrir le PDF
    if ($OpenPDF) {
        Write-Host ""
        Write-Host "üìñ Ouverture du rapport..." -ForegroundColor Yellow
        try {
            Start-Process "rapport-monitoring.pdf"
            Write-Host "‚úÖ Rapport ouvert dans le lecteur PDF par d√©faut" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Impossible d'ouvrir automatiquement le PDF" -ForegroundColor Yellow
            Write-Host "Ouvrez manuellement le fichier : rapport-monitoring.pdf" -ForegroundColor White
        }
    }
} else {
    Write-Host "üìÑ Rapport PDF : ‚ùå √âchec de la g√©n√©ration" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ Compilation termin√©e!" -ForegroundColor Green

# Afficher les instructions finales
Write-Host ""
Write-Host "üìã INSTRUCTIONS FINALES" -ForegroundColor Cyan
Write-Host "======================" -ForegroundColor Cyan
Write-Host "‚Ä¢ Le rapport est disponible dans : rapport-monitoring.pdf" -ForegroundColor White
Write-Host "‚Ä¢ Les graphiques sont dans le dossier : images/" -ForegroundColor White
Write-Host "‚Ä¢ Pour recompiler : .\compile_report.ps1" -ForegroundColor White
Write-Host "‚Ä¢ Pour reg√©n√©rer seulement les graphiques : .\compile_report.ps1 -GenerateGraphs -OpenPDF:$false" -ForegroundColor White
Write-Host ""

# Statistiques finales
if (Test-Path "rapport-monitoring.pdf") {
    Write-Host "üìà STATISTIQUES DU RAPPORT" -ForegroundColor Green
    Write-Host "==========================" -ForegroundColor Cyan
    
    # Compter les pages (approximation bas√©e sur la taille du fichier)
    $fileSize = (Get-Item "rapport-monitoring.pdf").Length
    $estimatedPages = [math]::Round($fileSize / 50KB)  # Approximation
    Write-Host "üìÑ Pages estim√©es : ~$estimatedPages pages" -ForegroundColor White
    Write-Host "üíæ Taille du fichier : $([math]::Round($fileSize / 1MB, 2)) MB" -ForegroundColor White
    Write-Host "üìÖ Date de g√©n√©ration : $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor White
}

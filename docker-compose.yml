services:
  # Prometheus - Système de monitoring et collecte de métriques
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana - Plateforme de visualisation
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter - Disabled on Windows (use windows-exporter instead)
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   networks:
  #     - monitoring
  #   restart: unless-stopped

  # cAdvisor - Métriques des conteneurs Docker (Windows compatible)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    platform: linux/amd64
    container_name: cadvisor
    ports:
      - "8082:8080"  # Changed to 8081 to avoid port conflict
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - monitoring
    restart: unless-stopped

  # Windows Exporter - Métriques spécifiques Windows (runs on host, not in container)
  # Note: For Windows metrics, install windows_exporter directly on the host
  # Download from: https://github.com/prometheus-community/windows_exporter/releases
  # windows-exporter:
  #   image: ghcr.io/prometheus-community/windows-exporter:latest
  #   container_name: windows-exporter
  #   ports:
  #     - "9182:9182"
  #   networks:
  #     - monitoring
  #   restart: unless-stopped

  # AlertManager - Gestion des alertes (optionnel)
  alertmanager:
    image: prom/alertmanager:latest
    platform: linux/amd64
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:

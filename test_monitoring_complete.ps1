# Script complet pour tester le syst√®me de monitoring et d'alertes
Write-Output "üöÄ TEST COMPLET DU SYST√àME DE MONITORING"
Write-Output "========================================"
Write-Output ""

# V√©rifier que tous les services sont en cours d'ex√©cution
Write-Output "1Ô∏è‚É£ V√©rification des services Docker..."
$containers = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
Write-Output $containers
Write-Output ""

# V√©rifier AlertManager
Write-Output "2Ô∏è‚É£ Test de connectivit√© AlertManager..."
try {
    $alertManagerStatus = Invoke-RestMethod -Uri 'http://localhost:9093/api/v2/status' -Method Get -ErrorAction Stop
    Write-Output "‚úÖ AlertManager accessible"
} catch {
    Write-Output "‚ùå AlertManager non accessible: $($_.Exception.Message)"
    exit 1
}

# V√©rifier Prometheus
Write-Output "3Ô∏è‚É£ Test de connectivit√© Prometheus..."
try {
    $prometheusStatus = Invoke-WebRequest -Uri 'http://localhost:9090/-/healthy' -UseBasicParsing -ErrorAction Stop
    Write-Output "‚úÖ Prometheus accessible"
} catch {
    Write-Output "‚ùå Prometheus non accessible: $($_.Exception.Message)"
    exit 1
}

# V√©rifier Grafana
Write-Output "4Ô∏è‚É£ Test de connectivit√© Grafana..."
try {
    $grafanaStatus = Invoke-WebRequest -Uri 'http://localhost:3000/api/health' -UseBasicParsing -ErrorAction Stop
    Write-Output "‚úÖ Grafana accessible"
} catch {
    Write-Output "‚ùå Grafana non accessible: $($_.Exception.Message)"
    exit 1
}

Write-Output ""
Write-Output "5Ô∏è‚É£ √âtat actuel des alertes..."
try {
    $alerts = Invoke-RestMethod -Uri 'http://localhost:9093/api/v2/alerts' -Method Get
    Write-Output "Nombre total d'alertes actives: $($alerts.Count)"
    
    $alertGroups = $alerts | Group-Object { $_.labels.alertname }
    foreach ($group in $alertGroups) {
        Write-Output "  - $($group.Name): $($group.Count) alertes"
    }
} catch {
    Write-Output "‚ùå Impossible de r√©cup√©rer les alertes: $($_.Exception.Message)"
}

Write-Output ""
Write-Output "6Ô∏è‚É£ Configuration des r√©cepteurs d'alertes..."
try {
    $receivers = Invoke-RestMethod -Uri 'http://localhost:9093/api/v2/receivers' -Method Get
    Write-Output "R√©cepteurs configur√©s:"
    foreach ($receiver in $receivers) {
        Write-Output "  - $($receiver.name)"
    }
} catch {
    Write-Output "‚ùå Impossible de r√©cup√©rer les r√©cepteurs: $($_.Exception.Message)"
}

Write-Output ""
Write-Output "üìã R√âSUM√â DE LA CONFIGURATION"
Write-Output "============================="
Write-Output "‚úÖ AlertManager: http://localhost:9093"
Write-Output "‚úÖ Prometheus: http://localhost:9090"
Write-Output "‚úÖ Grafana: http://localhost:3000"
Write-Output "üìß Email configur√©: oussamabartil.04@gmail.com"
Write-Output "üö® Seuil CPU: 85% pendant 5 minutes"
Write-Output ""

Write-Output "üéØ PROCHAINES √âTAPES POUR TESTER LES ALERTES:"
Write-Output "1. D√©marrer le serveur SMTP de test:"
Write-Output "   python smtp_test_server.py"
Write-Output ""
Write-Output "2. Dans un autre terminal, lancer le test de charge CPU:"
Write-Output "   powershell -ExecutionPolicy Bypass -File cpu_stress_test.ps1"
Write-Output ""
Write-Output "3. Surveiller les interfaces web:"
Write-Output "   - AlertManager: http://localhost:9093"
Write-Output "   - Prometheus: http://localhost:9090/alerts"
Write-Output "   - Grafana: http://localhost:3000"
Write-Output ""

$startTests = Read-Host "Voulez-vous d√©marrer le serveur SMTP de test maintenant? (y/N)"
if ($startTests -eq 'y' -or $startTests -eq 'Y') {
    Write-Output ""
    Write-Output "üöÄ D√©marrage du serveur SMTP de test..."
    Write-Output "Appuyez sur Ctrl+C pour arr√™ter"
    python smtp_test_server.py
}

# Script final pour g√©n√©rer le rapport de monitoring
# G√©n√®re automatiquement un rapport PDF complet du syst√®me de monitoring

param(
    [switch]$OpenPDF = $true,
    [switch]$Verbose = $false
)

Write-Host "üìÑ G√âN√âRATION DU RAPPORT DE MONITORING" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# Fonction pour afficher les messages en mode verbose
function Write-Verbose-Custom {
    param([string]$Message)
    if ($Verbose) {
        Write-Host "   $Message" -ForegroundColor Gray
    }
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "rapport-monitoring-simple.tex")) {
    Write-Host "‚ùå Fichier rapport-monitoring-simple.tex non trouv√©!" -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le dossier rapport-monitoring" -ForegroundColor Yellow
    exit 1
}

# Fonction pour v√©rifier si une commande existe
function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

# √âtape 1: V√©rification des d√©pendances
Write-Host "üîç V√©rification des d√©pendances..." -ForegroundColor Yellow

$latexAvailable = Test-Command "pdflatex"
if ($latexAvailable) {
    Write-Host "‚úÖ LaTeX : Disponible" -ForegroundColor Green
    Write-Verbose-Custom "pdflatex trouv√© dans le PATH"
} else {
    Write-Host "‚ùå LaTeX : Non disponible" -ForegroundColor Red
    Write-Host ""
    Write-Host "‚ö†Ô∏è  LaTeX est requis pour g√©n√©rer le rapport PDF" -ForegroundColor Yellow
    Write-Host "Installez MiKTeX depuis : https://miktex.org" -ForegroundColor White
    Write-Host "Ou TeX Live depuis : https://tug.org/texlive/" -ForegroundColor White
    Write-Host ""
    
    $continue = Read-Host "Voulez-vous continuer sans g√©n√©rer le PDF? (y/N)"
    if ($continue -ne 'y' -and $continue -ne 'Y') {
        exit 1
    }
}

Write-Host ""

# √âtape 2: G√©n√©ration des placeholders d'images
Write-Host "üé® Pr√©paration des ressources..." -ForegroundColor Yellow

if (-not (Test-Path "images")) {
    Write-Verbose-Custom "Cr√©ation du dossier images"
    New-Item -ItemType Directory -Path "images" -Force | Out-Null
}

# V√©rifier si les placeholders existent
$placeholders = @(
    "cpu_usage_24h_placeholder.txt",
    "memory_usage_placeholder.txt",
    "disk_usage_placeholder.txt",
    "network_traffic_placeholder.txt",
    "container_metrics_placeholder.txt",
    "alerts_timeline_placeholder.txt",
    "system_overview_placeholder.txt"
)

$missingPlaceholders = 0
foreach ($placeholder in $placeholders) {
    if (-not (Test-Path "images\$placeholder")) {
        $missingPlaceholders++
    }
}

if ($missingPlaceholders -gt 0) {
    Write-Verbose-Custom "G√©n√©ration des placeholders d'images manquants"
    try {
        python generate_graphs.py | Out-Null
        Write-Host "‚úÖ Ressources pr√©par√©es" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Impossible de g√©n√©rer les placeholders, mais ce n'est pas critique" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚úÖ Ressources d√©j√† disponibles" -ForegroundColor Green
}

Write-Host ""

# √âtape 3: Compilation du rapport LaTeX
if ($latexAvailable) {
    Write-Host "üìù Compilation du rapport PDF..." -ForegroundColor Yellow
    
    try {
        # Premi√®re compilation
        Write-Verbose-Custom "Premi√®re passe de compilation..."
        $output1 = pdflatex -interaction=nonstopmode rapport-monitoring-simple.tex 2>&1
        
        # Deuxi√®me compilation pour les r√©f√©rences crois√©es
        Write-Verbose-Custom "Deuxi√®me passe (r√©f√©rences crois√©es)..."
        $output2 = pdflatex -interaction=nonstopmode rapport-monitoring-simple.tex 2>&1
        
        # Troisi√®me compilation pour la table des mati√®res
        Write-Verbose-Custom "Troisi√®me passe (table des mati√®res)..."
        $output3 = pdflatex -interaction=nonstopmode rapport-monitoring-simple.tex 2>&1
        
        if (Test-Path "rapport-monitoring-simple.pdf") {
            Write-Host "‚úÖ PDF g√©n√©r√© avec succ√®s!" -ForegroundColor Green
            
            # Obtenir les informations du fichier
            $pdfFile = Get-Item "rapport-monitoring-simple.pdf"
            $fileSize = [math]::Round($pdfFile.Length / 1MB, 2)
            $creationTime = $pdfFile.LastWriteTime.ToString("dd/MM/yyyy HH:mm:ss")
            
            Write-Host "üìÑ Fichier : rapport-monitoring-simple.pdf" -ForegroundColor White
            Write-Host "üìä Taille : $fileSize MB" -ForegroundColor White
            Write-Host "üïí G√©n√©r√© le : $creationTime" -ForegroundColor White
            
        } else {
            Write-Host "‚ùå Erreur : Le fichier PDF n'a pas √©t√© cr√©√©" -ForegroundColor Red
            Write-Host "V√©rifiez le fichier rapport-monitoring-simple.log pour plus de d√©tails" -ForegroundColor Yellow
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors de la compilation LaTeX" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
    }
} else {
    Write-Host "‚è≠Ô∏è  Compilation LaTeX ignor√©e (LaTeX non disponible)" -ForegroundColor Yellow
}

Write-Host ""

# √âtape 4: Nettoyage des fichiers temporaires
Write-Host "üßπ Nettoyage..." -ForegroundColor Yellow

$tempFiles = @("*.aux", "*.log", "*.toc", "*.out", "*.fls", "*.fdb_latexmk", "*.synctex.gz")
$cleanedFiles = 0

foreach ($pattern in $tempFiles) {
    $files = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
    if ($files) {
        Remove-Item $pattern -Force -ErrorAction SilentlyContinue
        $cleanedFiles += $files.Count
        Write-Verbose-Custom "Supprim√© : $pattern"
    }
}

if ($cleanedFiles -gt 0) {
    Write-Host "‚úÖ $cleanedFiles fichier(s) temporaire(s) supprim√©(s)" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Aucun fichier temporaire √† nettoyer" -ForegroundColor Green
}

Write-Host ""

# √âtape 5: R√©sum√© final
Write-Host "üìä R√âSUM√â DE LA G√âN√âRATION" -ForegroundColor Green
Write-Host "==========================" -ForegroundColor Cyan

$success = Test-Path "rapport-monitoring-simple.pdf"

if ($success) {
    Write-Host "üìÑ Rapport PDF : ‚úÖ G√©n√©r√© avec succ√®s" -ForegroundColor Green
    Write-Host "üìÅ Emplacement : $(Get-Location)\rapport-monitoring-simple.pdf" -ForegroundColor White
    
    # Statistiques du rapport
    $pdfFile = Get-Item "rapport-monitoring-simple.pdf"
    $estimatedPages = [math]::Round($pdfFile.Length / 50KB)  # Estimation bas√©e sur la taille
    
    Write-Host ""
    Write-Host "üìà STATISTIQUES DU RAPPORT" -ForegroundColor Green
    Write-Host "==========================" -ForegroundColor Cyan
    Write-Host "üìÑ Pages estim√©es : ~$estimatedPages pages" -ForegroundColor White
    Write-Host "üíæ Taille du fichier : $([math]::Round($pdfFile.Length / 1MB, 2)) MB" -ForegroundColor White
    Write-Host "üìÖ Date de g√©n√©ration : $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor White
    
    # Ouvrir le PDF si demand√©
    if ($OpenPDF) {
        Write-Host ""
        Write-Host "üìñ Ouverture du rapport..." -ForegroundColor Yellow
        try {
            Start-Process "rapport-monitoring-simple.pdf"
            Write-Host "‚úÖ Rapport ouvert dans le lecteur PDF par d√©faut" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Impossible d'ouvrir automatiquement le PDF" -ForegroundColor Yellow
            Write-Host "Ouvrez manuellement : rapport-monitoring-simple.pdf" -ForegroundColor White
        }
    }
    
} else {
    Write-Host "üìÑ Rapport PDF : ‚ùå √âchec de la g√©n√©ration" -ForegroundColor Red
    if (Test-Path "rapport-monitoring-simple.log") {
        Write-Host "üìã Consultez le fichier de log pour plus de d√©tails : rapport-monitoring-simple.log" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üéâ G√©n√©ration termin√©e!" -ForegroundColor Green

# Instructions finales
Write-Host ""
Write-Host "üìã PROCHAINES √âTAPES" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

if ($success) {
    Write-Host "‚Ä¢ Le rapport est pr√™t √† √™tre consult√© ou partag√©" -ForegroundColor White
    Write-Host "‚Ä¢ Pour reg√©n√©rer : .\generer_rapport_final.ps1" -ForegroundColor White
    Write-Host "‚Ä¢ Pour ouvrir : start rapport-monitoring-simple.pdf" -ForegroundColor White
} else {
    Write-Host "‚Ä¢ V√©rifiez l'installation de LaTeX" -ForegroundColor White
    Write-Host "‚Ä¢ Consultez les logs d'erreur" -ForegroundColor White
    Write-Host "‚Ä¢ R√©essayez apr√®s avoir corrig√© les probl√®mes" -ForegroundColor White
}

Write-Host "‚Ä¢ Documentation compl√®te disponible dans README.md" -ForegroundColor White
Write-Host ""

# Afficher le contenu du rapport
if ($success) {
    Write-Host "üìö CONTENU DU RAPPORT" -ForegroundColor Green
    Write-Host "=====================" -ForegroundColor Cyan
    Write-Host "1. Introduction et contexte du projet" -ForegroundColor White
    Write-Host "2. Architecture d√©taill√©e du syst√®me" -ForegroundColor White
    Write-Host "3. Configuration Prometheus, Grafana, AlertManager" -ForegroundColor White
    Write-Host "4. M√©triques et r√®gles d'alertes" -ForegroundColor White
    Write-Host "5. Dashboards et visualisations" -ForegroundColor White
    Write-Host "6. Proc√©dures de test et validation" -ForegroundColor White
    Write-Host "7. Maintenance et sauvegarde" -ForegroundColor White
    Write-Host "8. Conclusion et recommandations" -ForegroundColor White
    Write-Host ""
    Write-Host "Le rapport contient des diagrammes d'architecture, des tableaux" -ForegroundColor Gray
    Write-Host "de configuration, et une documentation technique compl√®te." -ForegroundColor Gray
}
